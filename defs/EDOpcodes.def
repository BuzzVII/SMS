
    case 0x40: // IN   B,(C)
        break;
    case 0x41: // OUT  (C),B
        break;
    case 0x42: // SBC  HL,BC
        break;
    case 0x43: // D   (&0000),BC
        break;
    case 0x44: // EG
        break;
    case 0x45: // ETN
        break;
    case 0x46: // IM   0
        break;
    case 0x47: // LD   I,A
        break;
    case 0x48: // IN   C,(C)
        break;
    case 0x49: // OUT  (C),C
        break;
    case 0x4A: // ADC  HL,BC
        break;
    case 0x4B: // LD   BC,(&0000)
        break;
    case 0x4C: // [neg]
        break;
    case 0x4D: // RETI
        break;
    case 0x4E: // [im0]
        break;
    case 0x4F: // LD   R,A
        break;
    case 0x50: // IN   D,(C)
        break;
    case 0x51: // OUT  (C),D
        break;
    case 0x52: // SBC  HL,DE
        break;
    case 0x53: // LD   (&0000),DE
        break;
    case 0x54: // [neg]
        break;
    case 0x55: // [retn]
        break;
    case 0x56: // IM   1
        break;
    case 0x57: // LD   A,I
        break;
    case 0x58: // IN   E,(C)
        break;
    case 0x59: // OUT  (C),E
        break;
    case 0x5A: // ADC  HL,DE
        break;
    case 0x5B: // LD   DE,(&0000)
        break;
    case 0x5C: // [neg]
        break;
    case 0x5D: // [reti]
        break;
    case 0x5E: // IM   2
        break;
    case 0x5F: // LD   A,R
        break;
    case 0x60: // IN   H,(C)
        break;
    case 0x61: // OUT  (C),H
        break;
    case 0x62: // SBC  HL,HL
        break;
    case 0x63: // LD   (&0000),HL
        break;
    case 0x64: // [neg]
        break;
    case 0x65: // [retn]
        break;
    case 0x66: // [im0]
        break;
    case 0x67: // RRD
        break;
    case 0x68: // IN   L,(C)
        break;
    case 0x69: // OUT  (C),L
        break;
    case 0x6A: // ADC  HL,HL
        break;
    case 0x6B: // LD   HL,(&0000)
        break;
    case 0x6C: // [neg]
        break;
    case 0x6D: // [reti]
        break;
    case 0x6E: // [im0]
        break;
    case 0x6F: // RLD
        break;
    case 0x70: // IN   F,(C)
        break;
    case 0x71: // OUT  (C),F
        break;
    case 0x72: // SBC  HL,SP
        break;
    case 0x73: // LD   (&0000),SP
        break;
    case 0x74: // [neg]
        break;
    case 0x75: // [retn]
        break;
    case 0x76: // [im1]
        break;
    case 0x77: // [ld i,i?]
        break;
    case 0x78: // IN   A,(C)
        break;
    case 0x79: // OUT  (C),A
        break;
    case 0x7A: // ADC  HL,SP
        break;
    case 0x7B: // LD   SP,(&0000)
        break;
    case 0x7C: // [neg]
        break;
    case 0x7D: // [reti]
        break;
    case 0x7E: // [im2]
        break;
    case 0xA0: // LDI
        break;
    case 0xA1: // CPI
        break;
    case 0xA2: // INI
        break;
    case 0xA3: // OTI
        break;
    case 0xA4: // -
        break;
    case 0xA5: // -
        break;
    case 0xA6: // -
        break;
    case 0xA7: // -
        break;
    case 0xA8: // LDD
        break;
    case 0xA9: // CPD
        break;
    case 0xAA: // IND
        break;
    case 0xAB: // OTD
        break;
    case 0xAC: // -
        break;
    case 0xAD: // -
        break;
    case 0xAE: // -
        break;
    case 0xAF: // -
        break;
    case 0xB0: // LDIR
        break;
    case 0xB1: // CPIR
        break;
    case 0xB2: // INIR
        break;
    case 0xB3: // OTIR
        break;
    case 0xB4: // -
        break;
    case 0xB5: // -
        break;
    case 0xB6: // -
        break;
    case 0xB7: // -
        break;
    case 0xB8: // LDDR
        break;
    case 0xB9: // CPDR
        break;
    case 0xBA: // INDR
        break;
    case 0xBB: // OTDR
        break;
    default:
        std::cerr << "unknown ED opcode " << (int)m_opcode <<"\n";
