        case 0x00: // NOP
            std::cerr << "\rNOP             ";
            break;
        case 0x01: // LD   BC,&0000
            std::cerr << "\rLD   BC,&0000   ";
            BC = GET_16(m_pc);
            m_pc +=2;
            break;
        case 0x02: // LD   (BC),A
            std::cerr << "\rLD   (BC),A     ";
            m_ram[BC] = A;
            break;
        case 0x03: // INC  BC
            std::cerr << "\rINC  BC         ";
            BC++;
            break;
        case 0x04: // INC  B
            std::cerr << "\rINC  B          ";
            B++;
            break;
        case 0x05: // DEC  B
            std::cerr << "\rDEC  B          ";
            B-- ;
            break;
        case 0x06: // LD   B,&00
            std::cerr << "\rLD   B,&00      ";
            B=m_ram[m_pc++];
            break;
        case 0x07: // RLCA
            std::cerr << "\rRLCA            ";
            A = (A & 80) >> 7 | A << 1;
            break;
        case 0x08: // EX   AF,AF'
            std::cerr << "\rEX   AF,AF'     ";
            T16[0] = AF;
            AF     = AFx;
            AFx    = T16[0];
            break;
        case 0x09: // ADD  HL,BC
            std::cerr << "\rADD  HL,BC      ";
            HL+=BC;
            break;
        case 0x0A: // LD   A,(BC)
            std::cerr << "\rLD   A,(BC)     ";
            A=m_ram[BC];
            break;
        case 0x0B: // DEC  BC
            std::cerr << "\rDEC  BC         ";
            BC--;
            break;
        case 0x0C: // INC  C
            std::cerr << "\rINC  C          ";
            C++;
            break;
        case 0x0D: // DEC  C
            std::cerr << "\rDEC  C          ";
            C--;
            break;
        case 0x0E: // LD   C,&00
            std::cerr << "\rLD   C,&00      ";
            C=m_ram[m_pc++];
            break;
        case 0x0F: // RRCA
            std::cerr << "\rRRCA            ";
            A = A >> 1 | (A & 1) << 7;
            break;
        case 0x10: // DJNZ &4546
            std::cerr << "\rDJNZ &4546      ";
            jump(--B > 0);
            break;
        case 0x11: // LD   DE,&0000
            std::cerr << "\rLD   DE,&0000   ";
            DE=GET_16(m_pc);
            m_pc+=2;
            break;
        case 0x12: // LD   (DE),A
            std::cerr << "\rLD   (DE),A     ";
            m_ram[DE] = A;
            break;
        case 0x13: // INC  DE
            std::cerr << "\rINC  DE         ";
            DE++;
            break;
        case 0x14: // INC  D
            std::cerr << "\rINC  D          ";
            D++;
            break;
        case 0x15: // DEC  D
            std::cerr << "\rDEC  D          ";
            D--;
            break;
        case 0x16: // LD   D,&00
            std::cerr << "\rLD   D,&00      ";
            D=m_ram[m_pc++];
            break;
        case 0x17: // RLA
            std::cerr << "\rRLA             ";
            A <<= 1;
            break;
        case 0x18: // JR   &4546
            std::cerr << "\rJR   &4546      ";
            jump(1);
            break;
        case 0x19: // ADD  HL,DE
            std::cerr << "\rADD  HL,DE      ";
            HL+=DE;
            break;
        case 0x1A: // LD   A,(DE)
            std::cerr << "\rLD   A,(DE)     ";
            A=m_ram[DE];
            break;
        case 0x1B: // DEC  DE
            std::cerr << "\rDEC  DE         ";
            DE--;
            break;
        case 0x1C: // INC  E
            std::cerr << "\rINC  E          ";
            E++;
            break;
        case 0x1D: // DEC  E
            std::cerr << "\rDEC  E          ";
            E--;
            break;
        case 0x1E: // LD   E,&00
            std::cerr << "\rLD   E,&00      ";
            E=m_ram[m_pc++];
            break;
        case 0x1F: // RRA
            std::cerr << "\rRRA             ";
            A >>= 1;
            break;
        case 0x20: // JR   NZ,&4546
            std::cerr << "\rJR   NZ,&4546   ";
            jump((F & F_Z) != 0);
            break;
        case 0x21: // LD   HL,&0000
            std::cerr << "\rLD   HL,&0000   ";
            HL=GET_16(m_pc);
            m_pc+=2;
            break;
        case 0x22: // LD  (&0000),HL
            std::cerr << "\rLD  (&0000),HL  ";
            m_ram[(GET_16(m_pc))] = HL;
            m_pc+=2;
            break;
        case 0x23: // INC  HL
            std::cerr << "\rINC  HL         ";
            m_registers.long16[4]++;
            break;
        case 0x24: // INC  H
            std::cerr << "\rINC  H          ";
            H++;
            break;
        case 0x25: // DEC  H
            std::cerr << "\rDEC  H          ";
            H--;
            break;
        case 0x26: // LD   H,&00
            std::cerr << "\rLD   H,&00      ";
            H=m_ram[m_pc++];
            break;
        case 0x27: // DAA
            std::cerr << "\rDAA             ";
            break;
        case 0x28: // JR   Z,&4546
            std::cerr << "\rJR   Z,&4546    ";
            jump((F & F_Z) != 0);
            break;
        case 0x29: // ADD  HL,HL
            std::cerr << "\rADD  HL,HL      ";
            HL+=HL;
            break;
        case 0x2A: // LD  HL,(&0000)
            std::cerr << "\rLD  HL,(&0000)  ";
            HL=m_ram[(GET_16(m_pc))];
            m_pc+=2;
            break;
        case 0x2B: // DEC  HL
            std::cerr << "\rDEC  HL         ";
            HL--;
            break;
        case 0x2C: // INC  L
            std::cerr << "\rINC  L          ";
            L++;
            break;
        case 0x2D: // DEC  L
            std::cerr << "\rDEC  L          ";
            L--;
            break;
        case 0x2E: // LD   L,&00
            std::cerr << "\rLD   L,&00      ";
            L=m_ram[m_pc++];
            break;
        case 0x2F: // CPL
            std::cerr << "\rCPL             ";
            A ^= 0xFF;
            break;
        case 0x30: // JR   NC,&4546
            std::cerr << "\rJR   NC,&4546   ";
            jump((F & F_C) == 0);
            break;
        case 0x31: // LD   SP,&0000
            std::cerr << "\rLD   SP,&0000   ";
            m_sp=GET_16(m_pc);
            m_pc+=2;
            break;
        case 0x32: // LD   (&0000),A
            std::cerr << "\rLD   (&0000),A  ";
            m_ram[(GET_16(m_pc))] = A;
            m_pc+=2;
            break;
        case 0x33: // INC  SP
            std::cerr << "\rINC  SP         ";
            m_sp++;
            break;
        case 0x34: // INC  (HL)
            std::cerr << "\rINC  (HL)       ";
            m_ram[HL]--;
            break;
        case 0x35: // DEC  (HL)
            std::cerr << "\rDEC  (HL)       ";
            m_ram[HL]--;
            break;
        case 0x36: // LD   (HL),&00
            std::cerr << "\rLD   (HL),&00   ";
            m_ram[HL] = m_ram[m_pc++];
            break;
        case 0x37: // SCF
            std::cerr << "\rSCF             ";
            F |= F_C;
            break;
        case 0x38: // JR   C,&4546
            std::cerr << "\rJR   C,&4546    ";
            jump((F & F_C) != 0);
            break;
        case 0x39: // ADD  HL,SP
            std::cerr << "\rADD  HL,SP      ";
            HL += m_sp;
            break;
        case 0x3A: // LD   A,(&0000)
            std::cerr << "\rLD   A,(&0000)  ";
            A = m_ram[(GET_16(m_pc))];
            m_pc+=2;
            break;
        case 0x3B: // DEC  SP
            std::cerr << "\rDEC  SP         ";
            m_sp--;
            break;
        case 0x3C: // INC  A
            std::cerr << "\rINC  A          ";
            A++;
            break;
        case 0x3D: // DEC  A
            std::cerr << "\rDEC  A          ";
            A--;
            break;
        case 0x3E: // LD   A,&00
            std::cerr << "\rLD   A,&00      ";
            A=m_ram[m_pc++];
            break;
        case 0x3F: // CCF
            std::cerr << "\rCCF             ";
            F &= F_P | F_Z | F_S;
            F |= (F & F_C) ? F_H : F_C;
            F |= A & 0X28;
            break;
        case 0x40: // LD   B,B
            std::cerr << "\rLD   B,B        ";
            B=B;
            break;
        case 0x41: // LD   B,C
            std::cerr << "\rLD   B,C        ";
            B=C;
            break;
        case 0x42: // LD   B,D
            std::cerr << "\rLD   B,D        ";
            B=D;
            break;
        case 0x43: // LD   B,E
            std::cerr << "\rLD   B,E        ";
            B=E;
            break;
        case 0x44: // LD   B,H
            std::cerr << "\rLD   B,H        ";
            B=H;
            break;
        case 0x45: // LD   B,L
            std::cerr << "\rLD   B,L        ";
            B=L;
            break;
        case 0x46: // LD   B,(HL)
            std::cerr << "\rLD   B,(HL)     ";
            B=m_ram[HL];
            break;
        case 0x47: // LD   B,A
            std::cerr << "\rLD   B,A        ";
            B=A;
            break;
        case 0x48: // LD   C,B
            std::cerr << "\rLD   C,B        ";
            C=B;
            break;
        case 0x49: // LD   C,C
            std::cerr << "\rLD   C,C        ";
            C=C;
            break;
        case 0x4A: // LD   C,D
            std::cerr << "\rLD   C,D        ";
            C=D;
            break;
        case 0x4B: // LD   C,E
            std::cerr << "\rLD   C,E        ";
            C=E;
            break;
        case 0x4C: // LD   C,H
            std::cerr << "\rLD   C,H        ";
            C=H;
            break;
        case 0x4D: // LD   C,L
            std::cerr << "\rLD   C,L        ";
            C=L;
            break;
        case 0x4E: // LD   C,(HL)
            std::cerr << "\rLD   C,(HL)     ";
            C=m_ram[HL];
            break;
        case 0x4F: // LD   C,A
            std::cerr << "\rLD   C,A        ";
            C=A;
            break;
        case 0x50: // LD   D,B
            std::cerr << "\rLD   D,B        ";
            D=B;
            break;
        case 0x51: // LD   D,C
            std::cerr << "\rLD   D,C        ";
            D=C;
            break;
        case 0x52: // LD   D,D
            std::cerr << "\rLD   D,D        ";
            D=D;
            break;
        case 0x53: // LD   D,E
            std::cerr << "\rLD   D,E        ";
            D=E;
            break;
        case 0x54: // LD   D,H
            std::cerr << "\rLD   D,H        ";
            D=H;
            break;
        case 0x55: // LD   D,L
            std::cerr << "\rLD   D,L        ";
            D=L;
            break;
        case 0x56: // LD   D,(HL)
            std::cerr << "\rLD   D,(HL)     ";
            D=m_ram[HL];
            break;
        case 0x57: // LD   D,A
            std::cerr << "\rLD   D,A        ";
            D=A;
            break;
        case 0x58: // LD   E,B
            std::cerr << "\rLD   E,B        ";
            E=B;
            break;
        case 0x59: // LD   E,C
            std::cerr << "\rLD   E,C        ";
            E=C;
            break;
        case 0x5A: // LD   E,D
            std::cerr << "\rLD   E,D        ";
            E=D;
            break;
        case 0x5B: // LD   E,E
            std::cerr << "\rLD   E,E        ";
            E=E;
            break;
        case 0x5C: // LD   E,H
            std::cerr << "\rLD   E,H        ";
            E=H;
            break;
        case 0x5D: // LD   E,L
            std::cerr << "\rLD   E,L        ";
            E=L;
            break;
        case 0x5E: // LD   E,(HL)
            std::cerr << "\rLD   E,(HL)     ";
            E=m_ram[HL];
            break;
        case 0x5F: // LD   E,A
            std::cerr << "\rLD   E,A        ";
            E=A;
            break;
        case 0x60: // LD   H,B
            std::cerr << "\rLD   H,B        ";
            H=B;
            break;
        case 0x61: // LD   H,C
            std::cerr << "\rLD   H,C        ";
            H=C;
            break;
        case 0x62: // LD   H,D
            std::cerr << "\rLD   H,D        ";
            H=D;
            break;
        case 0x63: // LD   H,E
            std::cerr << "\rLD   H,E        ";
            H=E;
            break;
        case 0x64: // LD   H,H
            std::cerr << "\rLD   H,H        ";
            H=H;
            break;
        case 0x65: // LD   H,L
            std::cerr << "\rLD   H,L        ";
            H=L;
            break;
        case 0x66: // LD   H,(HL)
            std::cerr << "\rLD   H,(HL)     ";
            H=m_ram[HL];
            break;
        case 0x67: // LD   H,A
            std::cerr << "\rLD   H,A        ";
            H=A;
            break;
        case 0x68: // LD   L,B
            std::cerr << "\rLD   L,B        ";
            L=B;
            break;
        case 0x69: // LD   L,C
            std::cerr << "\rLD   L,C        ";
            L=C;
            break;
        case 0x6A: // LD   L,D
            std::cerr << "\rLD   L,D        ";
            L=D;
            break;
        case 0x6B: // LD   L,E
            std::cerr << "\rLD   L,E        ";
            L=E;
            break;
        case 0x6C: // LD   L,H
            std::cerr << "\rLD   L,H        ";
            L=H;
            break;
        case 0x6D: // LD   L,L
            std::cerr << "\rLD   L,L        ";
            L=L;
            break;
        case 0x6E: // LD   L,(HL)
            std::cerr << "\rLD   L,(HL)     ";
            L=m_ram[HL];
            break;
        case 0x6F: // LD   L,A
            std::cerr << "\rLD   L,A        ";
            L=A;
            break;
        case 0x70: // LD   (HL),B
            std::cerr << "\rLD   (HL),B     ";
            m_ram[HL] = B;
            break;
        case 0x71: // LD   (HL),C
            std::cerr << "\rLD   (HL),C     ";
            m_ram[HL] = C;
            break;
        case 0x72: // LD   (HL),D
            std::cerr << "\rLD   (HL),D     ";
            m_ram[HL] = D;
            break;
        case 0x73: // LD   (HL),E
            std::cerr << "\rLD   (HL),E     ";
            m_ram[HL] = E;
            break;
        case 0x74: // LD   (HL),H
            std::cerr << "\rLD   (HL),H     ";
            m_ram[HL] = H;
            break;
        case 0x75: // LD   (HL),L
            std::cerr << "\rLD   (HL),L     ";
            m_ram[HL] = L;
            break;
        case 0x76: // HALT
            std::cerr << "\rHALT            ";
            throw 1;
            break;
        case 0x77: // LD   (HL),A
            std::cerr << "\rLD   (HL),A     ";
            m_ram[HL] = A;
            break;
        case 0x78: // LD   A,B
            std::cerr << "\rLD   A,B        ";
            A=B;
            break;
        case 0x79: // LD   A,C
            std::cerr << "\rLD   A,C        ";
            A=C;
            break;
        case 0x7A: // LD   A,D
            std::cerr << "\rLD   A,D        ";
            A=D;
            break;
        case 0x7B: // LD   A,E
            std::cerr << "\rLD   A,E        ";
            A=E;
            break;
        case 0x7C: // LD   A,H
            std::cerr << "\rLD   A,H        ";
            A=H;
            break;
        case 0x7D: // LD   A,L
            std::cerr << "\rLD   A,L        ";
            A=L;
            break;
        case 0x7E: // LD   A,(HL)
            std::cerr << "\rLD   A,(HL)     ";
            A=m_ram[HL];
            break;
        case 0x7F: // LD   A,A
            std::cerr << "\rLD   A,A        ";
            A=A;
            break;
        case 0x80: // ADD  A,B
            std::cerr << "\rADD  A,B        ";
            A+=B;
            break;
        case 0x81: // ADD  A,C
            std::cerr << "\rADD  A,C        ";
            A+=C;
            break;
        case 0x82: // ADD  A,D
            std::cerr << "\rADD  A,D        ";
            A+=D;
            break;
        case 0x83: // ADD  A,E
            std::cerr << "\rADD  A,E        ";
            A+=E;
            break;
        case 0x84: // ADD  A,H
            std::cerr << "\rADD  A,H        ";
            A+=H;
            break;
        case 0x85: // ADD  A,L
            std::cerr << "\rADD  A,L        ";
            A+=L;
            break;
        case 0x86: // ADD  A,(HL)
            std::cerr << "\rADD  A,(HL)     ";
            A+=m_ram[HL];
            break;
        case 0x87: // ADD  A,A
            std::cerr << "\rADD  A,A        ";
            A+=A;
            break;
        case 0x88: // ADC  A,B
            std::cerr << "\rADC  A,B        ";
            A+=B + (F & F_C);
            break;
        case 0x89: // ADC  A,C
            std::cerr << "\rADC  A,C        ";
            A+=C + (F & F_C);
            break;
        case 0x8A: // ADC  A,D
            std::cerr << "\rADC  A,D        ";
            A+=D + (F & F_C);
            break;
        case 0x8B: // ADC  A,E
            std::cerr << "\rADC  A,E        ";
            A+=E + (F & F_C);
            break;
        case 0x8C: // ADC  A,H
            std::cerr << "\rADC  A,H        ";
            A+=H + (F & F_C);
            break;
        case 0x8D: // ADC  A,L
            std::cerr << "\rADC  A,L        ";
            A+=L + (F & F_C);
            break;
        case 0x8E: // ADC  A,(HL)
            std::cerr << "\rADC  A,(HL)     ";
            A+=m_ram[HL] + (F & F_C);
            break;
        case 0x8F: // ADC  A,A
            std::cerr << "\rADC  A,A        ";
            A+=A + (F & F_C);
            break;
        case 0x90: // SUB  A,B
            std::cerr << "\rSUB  A,B        ";
            A-=B;
            break;
        case 0x91: // SUB  A,C
            std::cerr << "\rSUB  A,C        ";
            A-=C;
            break;
        case 0x92: // SUB  A,D
            std::cerr << "\rSUB  A,D        ";
            A-=D;
            break;
        case 0x93: // SUB  A,E
            std::cerr << "\rSUB  A,E        ";
            A-=E;
            break;
        case 0x94: // SUB  A,H
            std::cerr << "\rSUB  A,H        ";
            A-=H;
            break;
        case 0x95: // SUB  A,L
            std::cerr << "\rSUB  A,L        ";
            A-=L;
            break;
        case 0x96: // SUB  A,(HL)
            std::cerr << "\rSUB  A,(HL)     ";
            A-=m_ram[HL];
            break;
        case 0x97: // SUB  A,A
            std::cerr << "\rSUB  A,A        ";
            A-=A;
            break;
        case 0x98: // SBC  A,B
            std::cerr << "\rSBC  A,B        ";
            A-=B - (F & F_C);
            break;
        case 0x99: // SBC  A,C
            std::cerr << "\rSBC  A,C        ";
            A-=C - (F & F_C);
            break;
        case 0x9A: // SBC  A,D
            std::cerr << "\rSBC  A,D        ";
            A-=D - (F & F_C);
            break;
        case 0x9B: // SBC  A,E
            std::cerr << "\rSBC  A,E        ";
            A-=E - (F & F_C);
            break;
        case 0x9C: // SBC  A,H
            std::cerr << "\rSBC  A,H        ";
            A-=H - (F & F_C);
            break;
        case 0x9D: // SBC  A,L
            std::cerr << "\rSBC  A,L        ";
            A-=L - (F & F_C);
            break;
        case 0x9E: // SBC  A,(HL)
            std::cerr << "\rSBC  A,(HL)     ";
            A-=m_ram[HL] - (F & F_C);
            break;
        case 0x9F: // SBC  A,A
            std::cerr << "\rSBC  A,A        ";
            A-=A - (F & F_C);
            break;
        case 0xA0: // AND  B
            std::cerr << "\rAND  B          ";
            A&=B;
            break;
        case 0xA1: // AND  C
            std::cerr << "\rAND  C          ";
            A&=C;
            break;
        case 0xA2: // AND  D
            std::cerr << "\rAND  D          ";
            A&=D;
            break;
        case 0xA3: // AND  E
            std::cerr << "\rAND  E          ";
            A&=E;
            break;
        case 0xA4: // AND  H
            std::cerr << "\rAND  H          ";
            A&=H;
            break;
        case 0xA5: // AND  L
            std::cerr << "\rAND  L          ";
            A&=L;
            break;
        case 0xA6: // AND  (HL)
            std::cerr << "\rAND  (HL)       ";
            A&=m_ram[HL];
            break;
        case 0xA7: // AND  A
            std::cerr << "\rAND  A          ";
            A&=A;
            break;
        case 0xA8: // XOR  B
            std::cerr << "\rXOR  B          ";
            A^=B;
            break;
        case 0xA9: // XOR  C
            std::cerr << "\rXOR  C          ";
            A^=C;
            break;
        case 0xAA: // XOR  D
            std::cerr << "\rXOR  D          ";
            A^=D;
            break;
        case 0xAB: // XOR  E
            std::cerr << "\rXOR  E          ";
            A^=E;
            break;
        case 0xAC: // XOR  H
            std::cerr << "\rXOR  H          ";
            A^=H;
            break;
        case 0xAD: // XOR  L
            std::cerr << "\rXOR  L          ";
            A^=L;
            break;
        case 0xAE: // XOR  (HL)
            std::cerr << "\rXOR  (HL)       ";
            A^=m_ram[HL];
            break;
        case 0xAF: // XOR  A
            std::cerr << "\rXOR  A          ";
            A^=A;
            break;
        case 0xB0: // OR   B
            std::cerr << "\rOR   B          ";
            A|=B;
            break;
        case 0xB1: // OR   C
            std::cerr << "\rOR   C          ";
            A|=C;
            break;
        case 0xB2: // OR   D
            std::cerr << "\rOR   D          ";
            A|=D;
            break;
        case 0xB3: // OR   E
            std::cerr << "\rOR   E          ";
            A|=E;
            break;
        case 0xB4: // OR   H
            std::cerr << "\rOR   H          ";
            A|=H;
            break;
        case 0xB5: // OR   L
            std::cerr << "\rOR   L          ";
            A|=L;
            break;
        case 0xB6: // OR   (HL)
            std::cerr << "\rOR   (HL)       ";
            A|=m_ram[HL];
            break;
        case 0xB7: // OR   A
            std::cerr << "\rOR   A          ";
            A|=A;
            break;
        case 0xB8: // CP   B
            std::cerr << "\rCP   B          ";
            break;
        case 0xB9: // CP   C
            std::cerr << "\rCP   C          ";
            break;
        case 0xBA: // CP   D
            std::cerr << "\rCP   D          ";
            break;
        case 0xBB: // CP   E
            std::cerr << "\rCP   E          ";
            break;
        case 0xBC: // CP   H
            std::cerr << "\rCP   H          ";
            break;
        case 0xBD: // CP   L
            std::cerr << "\rCP   L          ";
            break;
        case 0xBE: // CP   (HL)
            std::cerr << "\rCP   (HL)       ";
            break;
        case 0xBF: // CP   A
            std::cerr << "\rCP   A          ";
            break;
        case 0xC0: // RET  NZ
            std::cerr << "\rRET  NZ         ";
            ret( (F & F_Z) != 0 );
            break;
        case 0xC1: // POP  BC
            std::cerr << "\rPOP  BC         ";
            B = m_ram[m_sp++];
            C = m_ram[m_sp++];
            break;
        case 0xC2: // JP   NZ,&0000
            std::cerr << "\rJP   NZ,&0000   ";
            jump((F & F_Z) != 0 );
            break;
        case 0xC3: // JP   &0000
            std::cerr << "\rJP   &0000      ";
            m_pc = GET_16(m_pc);
            break;
        case 0xC4: // CALL NZ,&0000
            std::cerr << "\rCALL NZ,&0000   ";
            call( (F & F_Z) != 0 );
            break;
        case 0xC5: // PUSH BC
            std::cerr << "\rPUSH BC         ";
            m_ram[m_sp--] = B;
            m_ram[m_sp--] = C;
            break;
        case 0xC6: // ADD  A,&00
            std::cerr << "\rADD  A,&00      ";
            A = m_ram[m_pc++];
            break;
        case 0xC7: // RST  &00
            std::cerr << "\rRST  &00        ";
            break;
        case 0xC8: // RET  Z
            std::cerr << "\rRET  Z          ";
            ret((F & F_Z) != 0 );
            break;
        case 0xC9: // RET
            std::cerr << "\rRET             ";
            ret(1);
            break;
        case 0xCA: // JP   Z,&0000
            std::cerr << "\rJP   Z,&0000    ";
            jump((F & F_Z) == 0 );
            break;
        case 0xCB: // **** CB ****
            std::cerr << "\r**** CB ****    ";
            m_opcode = m_ram[m_pc++];
            switch (m_opcode)
            {
#               include "CBOpcodes.def"
            }
            break;
        case 0xCC: // CALL Z,&0000
            std::cerr << "\rCALL Z,&0000    ";
            call((F & F_C) == 0 );
            break;
        case 0xCD: // CALL &0000
            std::cerr << "\rCALL &0000      ";
            call(1);
            break;
        case 0xCE: // ADC  A,&00
            std::cerr << "\rADC  A,&00      ";
            A+=m_ram[GET_16(m_pc)];
            m_pc+=2;
            break;
        case 0xCF: // RST  &08
            std::cerr << "\rRST  &08        ";
            break;
        case 0xD0: // RET  NC
            std::cerr << "\rRET  NC         ";
            ret((F & F_C) != 0);
            break;
        case 0xD1: // POP  DE
            std::cerr << "\rPOP  DE         ";
            D = m_ram[m_sp++];
            E = m_ram[m_sp++];
            break;
        case 0xD2: // JP   NC,&0000
            std::cerr << "\rJP   NC,&0000   ";
            jump((F & F_C) != 0 );
            break;
        case 0xD3: // OUT  (&00),A
            std::cerr << "\rOUT  (&00),A    ";
            break;
        case 0xD4: // CALL NC,&0000
            std::cerr << "\rCALL NC,&0000   ";
            call((F & F_C) != 0 );
            break;
        case 0xD5: // PUSH DE
            std::cerr << "\rPUSH DE         ";
            m_ram[m_sp--] = D;
            m_ram[m_sp--] = E;
            break;
        case 0xD6: // SUB  A,&00
            std::cerr << "\rSUB  A,&00      ";
            A -= m_ram[m_pc++];
            break;
        case 0xD7: // RST  &10
            std::cerr << "\rRST  &10        ";
            break;
        case 0xD8: // RET  C
            std::cerr << "\rRET  C          ";
            ret((F & F_C) == 0);
            break;
        case 0xD9: // EXX
            std::cerr << "\rEXX             ";
            std::copy_n(&A     , 8, &T8[0]);
            std::copy_n(&Ax    , 8, &A    );
            std::copy_n(&T8[0] , 8, &Ax   );
            break;
        case 0xDA: // JP   C,&0000
            std::cerr << "\rJP   C,&0000    ";
            jump((F & F_C) != 0 );
            break;
        case 0xDB: // IN   A,(&00)
            std::cerr << "\rIN   A,(&00)    ";
            break;
        case 0xDC: // CALL C,&0000
            std::cerr << "\rCALL C,&0000    ";
            call((F & F_C) == 0 );
            break;
        case 0xDD: // **** DD ****
            std::cerr << "\r**** DD ****    ";
            m_opcode = m_ram[m_pc++];
            switch (m_opcode)
            {
#               include "DDOpcodes.def"
            }
            break;
        case 0xDE: // SBC  A,&00
            std::cerr << "\rSBC  A,&00      ";
            A-=m_ram[GET_16(m_pc)];
            m_pc+=2;
            break;
        case 0xDF: // RST  &18
            std::cerr << "\rRST  &18        ";
            break;
        case 0xE0: // RET  PO
            std::cerr << "\rRET  PO         ";
            ret((F & F_P) == 0);
            break;
        case 0xE1: // POP  HL
            std::cerr << "\rPOP  HL         ";
            H = m_ram[m_sp++];
            L = m_ram[m_sp++];
            break;
        case 0xE2: // JP   PO,&0000
            std::cerr << "\rJP   PO,&0000   ";
            jump((F & F_P) == 0 );
            break;
        case 0xE3: // EX   (SP),HL
            std::cerr << "\rEX   (SP),HL    ";
            T16[0]      = m_ram[m_sp];
            m_ram[m_sp] = HL;
            HL          = T16[0];
            break;
        case 0xE4: // CALL PO,&0000
            std::cerr << "\rCALL PO,&0000   ";
            call((F & F_P) == 0 );
            break;
        case 0xE5: // PUSH HL
            std::cerr << "\rPUSH HL         ";
            m_ram[m_sp--] = H;
            m_ram[m_sp--] = L;
            break;
        case 0xE6: // AND  &00
            std::cerr << "\rAND  &00        ";
            A&=m_ram[m_pc++];
            break;
        case 0xE7: // RST  &20
            std::cerr << "\rRST  &20        ";
            break;
        case 0xE8: // RET  PE
            std::cerr << "\rRET  PE         ";
            ret((F & F_P) != 0);
            break;
        case 0xE9: // JP   (HL)
            std::cerr << "\rJP   (HL)       ";
            m_pc = GET_16(HL);
            break;
        case 0xEA: // JP   PE,&0000
            std::cerr << "\rJP   PE,&0000   ";
            jump((F & F_P) != 0);
            break;
        case 0xEB: // EX   DE,HL
            std::cerr << "\rEX   DE,HL      ";
            T16[0] = DE;
            DE     = HL;
            HL     = T16[0];
            break;
        case 0xEC: // CALL PE,&0000
            std::cerr << "\rCALL PE,&0000   ";
            call((F & F_P) == 0 );
            break;
        case 0xED: // **** ED ****
            std::cerr << "\r**** ED ****    ";
            m_opcode = m_ram[m_pc++];
            switch (m_opcode)
            {
#               include "EDOpcodes.def"
            }
            break;
        case 0xEE: // XOR  &00
            std::cerr << "\rXOR  &00        ";
            A^=m_ram[m_pc++];
            break;
        case 0xEF: // RST  &28
            std::cerr << "\rRST  &28        ";
            break;
        case 0xF0: // RET  P
            std::cerr << "\rRET  P          ";
            ret((F & F_S) == 0);
            break;
        case 0xF1: // POP  AF
            std::cerr << "\rPOP  AF         ";
            A = m_ram[m_sp++];
            F = m_ram[m_sp++];
            break;
        case 0xF2: // JP   P,&0000
            std::cerr << "\rJP   P,&0000    ";
            jump((F & F_S) == 0 );
            break;
        case 0xF3: // DI
            std::cerr << "\rDI              ";
            break;
        case 0xF4: // CALL P,&0000
            std::cerr << "\rCALL P,&0000    ";
            call((F & F_S) == 0 );
            break;
        case 0xF5: // PUSH AF
            std::cerr << "\rPUSH AF         ";
            m_ram[m_sp--] = A;
            m_ram[m_sp--] = F;
            break;
        case 0xF6: // OR   &00
            std::cerr << "\rOR   &00        ";
            A|=m_ram[m_pc++];
            break;
        case 0xF7: // RST  &30
            std::cerr << "\rRST  &30        ";
            break;
        case 0xF8: // RET  M
            std::cerr << "\rRET  M          ";
            ret((F & F_S) != 0);
            break;
        case 0xF9: // LD   SP,HL
            std::cerr << "\rLD   SP,HL      ";
            m_sp=HL;
            break;
        case 0xFA: // JP   M,&0000
            std::cerr << "\rJP   M,&0000    ";
            jump((F & F_S) != 0 );
            break;
        case 0xFB: // EI
            std::cerr << "\rEI              ";
            break;
        case 0xFC: // CALL M,&0000
            std::cerr << "\rCALL M,&0000    ";
            call((F & F_S) != 0 );
            break;
        case 0xFD: // **** FD ****
            std::cerr << "\r**** FD ****    ";
            m_opcode = m_ram[m_pc++];
            switch (m_opcode)
            {
#               include "FDOpcodes.def"
            }
            break;
        case 0xFE: // CP   &00
            std::cerr << "\rCP   &00        ";
            break;
        case 0xFF: // RST  &38
            std::cerr << "\rRST  &38        ";
            break;
        default:
            std::cerr << "unknown opcode " << (int)m_opcode <<"\n";
